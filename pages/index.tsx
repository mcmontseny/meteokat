import type { NextPage } from "next";
import Head from "next/head";
import Search from "../components/Search";
import CurrentWeather from "../components/CurrentWeather";
import FavoritesList from "../components/FavoritesList";
import SummaryCardList from "../components/SummaryCardList";
import Forecast from "../components/Forecast";
import moment from "moment";

import getConfig from "next/config";
const {
  publicRuntimeConfig: {
    DEFAULT_CITY,
    API_KEY,
    AEMET_API_URL,
    AEMET_API_DAILY_URL,
    AEMET_API_HOURLY_URL,
  },
} = getConfig();

const Home: NextPage = (props: any) => {
  const favoriteLocations: any[] = [
    {
      id: 2,
      city: "Sils",
      weather: 1,
      favorite: true,
      temperature: 12,
      probPrecipitation: 35,
      humidity: 27,
      windSpeed: 6,
    },
    {
      id: 3,
      city: "Palafrugell",
      weather: 2,
      favorite: true,
      temperature: 9,
      probPrecipitation: 100,
      humidity: 60,
      windSpeed: 46,
    },
    {
      id: 4,
      city: "Girona",
      weather: 2,
      favorite: true,
      temperature: 6,
      probPrecipitation: 100,
      humidity: 87,
      windSpeed: 12,
    },
    {
      id: 1,
      city: "Santa Coloma de Farners",
      weather: 1,
      favorite: true,
      temperature: -3,
      probPrecipitation: 62,
      humidity: 36,
      windSpeed: 9,
    },
  ];

  return (
    <>
      <Head>
        <title>⛅ Meteokat - Quin temps fa a ...?</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col lg:flex-row h-full bg-[#f7f6f9]">
        <div className="flex flex-col bg-white p-6">
          <Search />
          <CurrentWeather currentWeather={props.currentWeather} />
          <FavoritesList favoriteLocations={favoriteLocations} />
        </div>
      </div>
      <div className="flex flex-col flex-1 bg-[#f7f6f9] h-ful p-6">
        <div className="flex flex-row mb-4 items-center justify-between">
          <p className="text-2xl font-bold">El temps</p>
        </div>

        <div className="flex flex-col">
          <div className="grid gap-4 md:grid-cols-2">
            <Forecast
              title="Predicció pròximes hores"
              btnName="Visualitzar més hores"
              data={props.weatherByHours}
              type="hours"
            ></Forecast>
            <Forecast
              title="Predicció 7 dies"
              btnName="Visualitzar més dies"
              data={props.weatherByDays}
              type="days"
            ></Forecast>
          </div>
        </div>

        <div className="flex flex-col">
          <p className="text-xl font-bold mb-4">El més destacat d'avui</p>
          <SummaryCardList data={"hola"} />
        </div>
      </div>
      {/* <div className="flex flex-col lg:flex-row h-full bg-[#f7f6f9]">
        <div className="flex flex-col bg-white p-6">
          <Search />
          <CurrentWeather currentWeather={props.currentWeather} />
          <FavoritesList favoriteLocations={favoriteLocations} />
        </div>
      </div> */}
    </>
  );
};

export async function getStaticProps() {
  const secUrls: any = await getAEMETSecureEndpoints();
  if (secUrls?.err) throw secUrls.err;

  const AEMETData: any = await getAEMETData(secUrls);
  if (AEMETData?.err) throw AEMETData.err;

  const mappedWeatherByDays: any = getWeatherByDays(AEMETData?.weatherByDays);
  const mappedWeatherByHours: any = getWeatherByHours(
    AEMETData?.weatherByHours
  );

  const mappedCurrentWeather: any = getCurrentWeather(mappedWeatherByHours);
  return {
    props: {
      weatherByHours: mappedWeatherByHours,
      weatherByDays: mappedWeatherByDays,
      currentWeather: mappedCurrentWeather,
    },
  };
}

export function getAEMETSecureEndpoints(): Promise<any> {
  return new Promise<any>(async (resolve, reject) => {
    try {
      const weatherByHoursAPI = `${AEMET_API_URL}${AEMET_API_HOURLY_URL}`;
      const weatherByDaysAPI = `${AEMET_API_URL}${AEMET_API_DAILY_URL}`;
      const params = `${DEFAULT_CITY}?api_key=${API_KEY}`;

      const dataByHoursAMET = await fetch(`${weatherByHoursAPI}${params}`)
        .then((response) => response.json())
        .catch((err) => {
          console.log("Error a l'obtenir url dades horaries API AEMET!", err);
          throw err;
        });

      const dataByDaysAMET = await fetch(`${weatherByDaysAPI}${params}`)
        .then((response) => response.json())
        .catch((err) => {
          console.log("Error a l'obtenir url dades diaries API AEMET!", err);
          throw err;
        });

      resolve({ dataByDaysAMET, dataByHoursAMET });
    } catch (error) {
      reject({ err: error });
    }
  });
}

export function getAEMETData(secUrls: any): Promise<any> {
  return new Promise<any>(async (resolve, reject) => {
    try {
      const weatherByHours = await fetch(secUrls?.dataByHoursAMET?.datos)
        .then((response) => response.json())
        .catch((err) => {
          console.log("Error a l'obtenir dades horaries API AEMET!", err);
          throw err;
        });
      const weatherByDays = await fetch(secUrls?.dataByDaysAMET?.datos)
        .then((response) => response.json())
        .catch((err) => {
          console.log("Error a l'obtenir dades diaries API AEMET!", err);
          throw err;
        });

      resolve({ weatherByHours, weatherByDays });
    } catch (error) {
      reject({ err: error });
    }
  });
}

export function getWeatherByHours(weatherByHours: any): any[] {
  const mappedWeatherByHours: any[] = [];

  const { id, elaborado, nombre, provincia, prediccion } = weatherByHours[0];

  prediccion.dia.map((day: any, index: number) => {
    const keyDay: number = +moment(day.fecha).format("D");
    const todayDay: number = +moment().format("D");
    const todayHour: number = +moment().format("HH");

    if (keyDay !== todayDay && index === 0) return; // Si el primer dia no es l'actual ignorem.

    let hour: number = keyDay === todayDay ? todayHour : 0;

    while (hour < 24) {
      const mappedWeatherHour = {
        ...day,
        id,
        elaborado,
        nombre,
        provincia,
        day: keyDay,
        hour,
      };
      for (const key of Object.keys(mappedWeatherHour)) {
        if (!Array.isArray(mappedWeatherHour[key])) break;
        mappedWeatherHour[key] = mappedWeatherHour[key].find((el: any) => {
          if (el.periodo.length !== 2) {
            // Si el periode és rang hores
            const [initHour, lastHour] = [
              +el.periodo.slice(0, 2) === 1 ? 0 : +el.periodo.slice(0, 2), // Periode 01 a 07 convert 01 a 0
              +el.periodo.slice(2) === 1 ? 24 : +el.periodo.slice(2), // Periode 19 a 01 convert 01 a 24
            ];
            return hour === 0 || (hour >= initHour && hour < lastHour);
          }
          return +el.periodo === hour; // Si el periode és una hora concreta
        });
      }

      // Si tenim valors undefined, no guardem
      if (!Object.values(mappedWeatherHour).includes(undefined)) {
        mappedWeatherByHours.push(mappedWeatherHour);
      }

      hour++;
    }
  });
  return mappedWeatherByHours;
}

export function getWeatherByDays(weatherByDays: any): any[] {
  const { id, elaborado, nombre, provincia, prediccion } = weatherByDays[0];
  return prediccion.dia
    .map((day: any, index: number) => {
      const keyDay: number = +moment(day.fecha).format("D");
      const todayDay: number = +moment().format("D");

      if (keyDay !== todayDay && index === 0) return; // Si el primer dia no es l'actual ignorem.
      const mappedWeatherDay = {
        ...day,
        id,
        elaborado,
        nombre,
        provincia,
        day: keyDay,
      };

      for (const key of Object.keys(mappedWeatherDay)) {
        // Si es un array agafem el periode de 00-24
        if (Array.isArray(mappedWeatherDay[key])) {
          mappedWeatherDay[key] =
            mappedWeatherDay[key].length > 1
              ? mappedWeatherDay[key].find((el: any) => {
                  return el.periodo === "00-24";
                })
              : mappedWeatherDay[key][0]; // Si encara no tenim la prediccio amb peride agafem posicio 0
        } else if (typeof mappedWeatherDay[key] === "object") {
          // Si es un objecte agafem la maxima + minima + calculem la mitjana
          const { maxima, minima } = mappedWeatherDay[key];
          mappedWeatherDay[key] = {
            maxima,
            minima,
            promedio:
              maxima && minima ? Math.round((maxima + minima) / 2) : "-",
          };
        }
      }
      return mappedWeatherDay;
    })
    .filter((el: any) => el); // Eliminar dies undefined
}

export function getFullWeatherByDays(weatherByDays: any): any[] {
  const mappedWeatherByDays: any[] = [];

  const { id, elaborado, nombre, provincia, prediccion } = weatherByDays[0];

  prediccion.dia.map((day: any, index: number) => {
    const keyDay: number = +moment(day.fecha).format("D");
    const todayDay: number = +moment().format("D");

    if (keyDay !== todayDay && index === 0) return; // Si el primer dia no es l'actual ignorem.
    mappedWeatherByDays.push({
      ...day,
      id,
      elaborado,
      nombre,
      provincia,
      day: keyDay,
    });
  });
  return mappedWeatherByDays;
}

export function getCurrentWeather(
  mappedWeatherByHours: any,
  fab: boolean = false
): any {
  const actualDay = +moment().format("D");
  const actualHour = +moment().format("HH");
  const mappedCurrentWeather: any = mappedWeatherByHours.find(
    (el: any) => el.day === actualDay && el.hour === actualHour
  );
  mappedCurrentWeather["favorite"] = fab;
  return mappedCurrentWeather;
}

export default Home;
